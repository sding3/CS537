#include <stdlib.h>
#include <stdio.h>
#include <fcntl.h>
#include <sys/mman.h>
#include <unistd.h>
#include "mem.h"

#define USED 0xBEEFFACE
#define FREE 0x1564BEEF

static void *space;

struct global_header{
	int block_size;
	int biggest_free_slice;
	void *next_free;
};

struct slice_header{
	int magic; //magic is also used to indicate whether slice is free
	int size;
	void *previous_slice;
	void *next_slice;
	void *next_free;
};

void process_max(){
	//after an allocation, biggest_free_slice may change.We handle that in this function
	int max=0;
	struct global_header *header = space;
	struct slice_header *fslice = header->next_free;
	while(fslice !=NULL){
		if(max<fslice->size){
			max = fslice->size;
		}
		fslice = fslice->next_free;
	}
	header->biggest_free_slice = max;
}

void *Mem_Init(int sizeOfRegion){
	if (sizeOfRegion <= 0 || space != NULL)
	{
    	perror("Bad args");
    	exit(1);
	}
	int pagesize = getpagesize();
	//rounds up if not a whole page
	if(sizeOfRegion%pagesize!=0){
		sizeOfRegion=((sizeOfRegion/pagesize)+1)*pagesize;
	}
	int fd = open("/dev/zero",O_RDWR);
	void *ptr = mmap(NULL, sizeOfRegion, PROT_READ | PROT_WRITE, MAP_PRIVATE, fd, 0);
	if(ptr == MAP_FAILED){ perror("mmap");space=NULL; exit(1);}
	close(fd); //closing the device, mapping won't be affected
	space = ptr;
	//Initilize Global Header
	struct global_header *header = space;
	header->next_free = space + sizeof(struct global_header);
	header->block_size = sizeOfRegion;
	header->biggest_free_slice = (header->block_size)-sizeof(struct global_header)-sizeof(struct slice_header);
	//Initialize Slice Header
	struct slice_header *slice = header->next_free;
	slice->magic = FREE;
	slice->size = (header->block_size)-sizeof(struct global_header)-sizeof(struct slice_header);
	slice->previous_slice=NULL;
	slice->next_slice=NULL;
	slice->next_free=NULL;
	return space;
}

void *Mem_Alloc(int size){
	struct global_header *header = space;
	if(size>(header->biggest_free_slice) || header->next_free ==NULL)
		return NULL;//not enough contiguous space left
	
	
	struct slice_header *fslice = header-> next_free;
	struct slice_header *previous_fslice = NULL;
	
	int found=0;
	int remain = 0;
	//@ this point, guaranteed to have a contiguous slice
	//just a matter of finding it
	do{
		//seek slice & allocate
		if(fslice->size >= size){
			found=1;
			fslice->size = size;
			fslice->magic = USED;
		}
		
		//post-processing when found
		if(found){
			//printf("found\n");
			if(fslice->next_slice == NULL){//slice found is last slice
					remain =(header->block_size) - ((void *)fslice+sizeof(struct slice_header)+size-space);
			}else{
					remain = (void *)(fslice->next_slice) - (void *)(fslice)-size-sizeof(struct slice_header);
			}
			
			if(remain>=(sizeof(struct slice_header)+sizeof(int))){
			//freeblocks left
				void *next_free_was = fslice->next_free;
				void *next_slice_was = fslice->next_slice;
				
				fslice->next_free = (void *)fslice+sizeof(struct slice_header)+size;		
				fslice->next_slice = fslice->next_free;
				
				struct slice_header *newslice = fslice->next_free;
				newslice->magic = FREE;
				if(next_slice_was == NULL){
					newslice->size =remain - sizeof(struct slice_header);
				}else{
					newslice->size =remain - sizeof(struct slice_header);
				}
				newslice->previous_slice=fslice;
				newslice->next_slice=next_slice_was;
				newslice->next_free=next_free_was;
			
				if(previous_fslice != NULL){
					previous_fslice->next_free = newslice;
				}else{
					header->next_free = newslice;
				}
			}else{
			//not enough free blocks left to create a new slice
				if(previous_fslice != NULL){
					previous_fslice->next_free = fslice->next_free;
				}else{
					header->next_free = fslice->next_free;
				}
			
			}
			process_max();
			return (void*)fslice+sizeof(struct slice_header);
		}
		
		previous_fslice = fslice;
		fslice = fslice->next_free;
		
	}while(!found);
	return NULL;
}
int Mem_Free(void *ptr){
	
	struct slice_header *freeing=ptr-sizeof(struct slice_header);
	struct global_header *header=space;
	
	if(freeing->magic!=USED){
		return -1;
	}
	
	freeing->magic = FREE;
	
	//calculate actual size of this slice
	if(freeing->next_slice == NULL){
		freeing->size = (space+header->block_size)-(void*)freeing-sizeof(struct slice_header);
		//printf("last slice: actual size become %d\n",freeing->size);
	}else{
		freeing->size = (freeing->next_slice)-(void*)freeing-sizeof(struct slice_header);
		//printf("not last: actual size become %d\n",freeing->size);
	}
	
	//add to free list
	freeing->next_free = header->next_free;
	header->next_free = freeing;
	
	//update max_free_slice
	if(freeing->size > header->biggest_free_slice){
		header->biggest_free_slice = freeing->size;
	}
	
	return 0;
}


void Mem_Dump(){
	if(space==NULL){
		printf("Memory has not been initialized yet!\n");
		return;
	}
	
	struct global_header *header = space;
	struct slice_header *slice = space+sizeof(struct global_header);
	
	printf("Global Header: %d\n",(int)sizeof(struct global_header));
	printf("Slice Header Size: %d\n\n\n",(int)sizeof(struct slice_header));
	
	
	printf("-------------------------\n");
	printf("|Global Header @ %p\n",header);
	printf("|Next_Free: %p\n",header->next_free);
	printf("|Block_Size: %d\n",header->block_size);
	printf("|Biggest_Free_Slice: %d\n",header->biggest_free_slice);
	
	int done=0;
	do{
		printf("-------------------------\n");
		printf("|Slice @ %p\n",slice);
		if(slice->magic==FREE)
			printf("|State: FREE\n");
		else if(slice->magic==USED)
			printf("|State: USED\n");
		else
			printf("|State: CORRUPT!!!\n");
			
		printf("|Slice_Size: %d\n",slice->size);
		printf("|Previous_Slice: %p\n",slice->previous_slice);
		printf("|Next_Slice: %p\n",slice->next_slice);
		printf("|Next_Free: %p\n",slice->next_free);
		
		if(slice->next_slice==NULL){
			done=1;
		}
		else{
			slice = slice->next_slice;
		}
	}while(!done);
	
	printf("-------------------------\n");
}




